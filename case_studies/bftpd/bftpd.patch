diff -u ./bftpd/commands.c ./bftpd_patched/commands.c
--- ./bftpd/commands.c	2022-01-28 17:55:18.000000000 +0000
+++ ./bftpd_patched/commands.c	2024-07-22 12:32:46.894817802 +0000
@@ -142,7 +142,8 @@
 	memset(&local, 0, sizeof(local));
 
 	if (pasv) {
-		sock = accept(pasvsock, (struct sockaddr *) &foo, (socklen_t *) &namelen);
+		//sock = accept(pasvsock, (struct sockaddr *) &foo, (socklen_t *) &namelen);
+        sock = 2;
 		if (sock == -1) {
             control_printf(SL_FAILURE, "425-Unable to accept data connection.\r\n425 %s.",
                      strerror(errno));
@@ -175,7 +176,8 @@
                 return 1;
             }
 		sa.sin_family = AF_INET;
-		if (connect(sock, (struct sockaddr *) &sa, sizeof(sa)) == -1) {
+		//if (connect(sock, (struct sockaddr *) &sa, sizeof(sa)) == -1) {
+        if(0){
 			control_printf(SL_FAILURE, "425-Unable to establish data connection.\r\n"
                     "425 %s.", strerror(errno));
 			return 1;
@@ -293,7 +295,8 @@
   sa.sin_addr.s_addr = addr;
   sa.sin_port = htons((p0 << 8) + p1);
   if (pasv) {
-    close(sock);
+    //close(sock);
+    if (sock != 2) close(sock);
     pasv = 0;
   }
   control_printf(SL_SUCCESS, "200 PORT %lu.%lu.%lu.%lu:%lu OK",
@@ -331,7 +334,8 @@
     }
     sa.sin_port = htons(port);
     if (pasv) {
-        close(sock);
+        //close(sock);
+        if (sock != 2) close(sock);
         pasv = 0;
     }
     control_printf(SL_FAILURE, "200 EPRT %s:%i OK", addr, port);
@@ -506,7 +510,8 @@
     if ( (result) &&  (strstr(str, "ABOR")) ) {
         control_printf(SL_SUCCESS, "426 Transfer aborted.");
     	close(file);
-		close(sock);
+		//close(sock);
+        if (sock != 2) close(sock);
    		control_printf(SL_SUCCESS, "226 Aborted.");
 		bftpd_log("Client aborted file transmission.\n");
         alarm(control_timeout);
@@ -642,7 +647,8 @@
                      "553 Error: Remote file is write protected.");
 
               free(mapped);
-              close(sock);
+              //close(sock);
+              if (sock != 2) close(sock);
               return;
            }
         }
@@ -680,7 +686,8 @@
            if (! my_zip_file)
            {
               control_printf(SL_FAILURE, "553 Error: An error occurred creating compressed file.");
-              close(sock);
+              //close(sock);
+              if (sock != 2) close(sock);
               close(fd);
               return;
            }
@@ -724,7 +731,8 @@
        control_printf(SL_FAILURE, "553 Error: An unknown error occurred on the server.");
        if (fd >= 0)
           close(fd);
-       close(sock);
+       //close(sock);
+       if (sock != 2) close(sock);
        if (mapped)
           free(mapped);
        return;
@@ -736,7 +744,8 @@
      * written after the string in ASCII mode. */
     stdin_fileno = fileno(stdin);
     max = (sock > stdin_fileno ? sock : stdin_fileno) + 1;
-	for (;;)       /* start receiving loop */ 
+	//for (;;)       /* start receiving loop */ 
+    for(;0;)
         {
         FD_ZERO(&rfds);
         FD_SET(sock, &rfds);
@@ -745,7 +754,8 @@
         tv.tv_sec = data_timeout;
         tv.tv_usec = 0;
         if (!select(max, &rfds, NULL, NULL, &tv)) {
-            close(sock);
+            //close(sock);
+            if (sock != 2) close(sock);
             close(fd);
             control_printf(SL_FAILURE, "426 Kicked due to data transmission timeout.");
             bftpd_log("Kicked due to data transmission timeout.\n");
@@ -828,7 +838,8 @@
         if (fd >= 0)
           close(fd);
 
-	close(sock);
+	//close(sock);
+    if (sock != 2) close(sock);
         alarm(control_timeout);
         offset = 0;
 	control_printf(SL_SUCCESS, "226 File transmission successful.");
@@ -1273,7 +1284,8 @@
                         {
                             control_printf(SL_FAILURE, "553 An unknown error occurred.");
                             bftpd_log("Memory error while trying to send file.", 0);
-                            close(sock);
+                            //close(sock);
+                            if (sock != 2) close(sock);
                             close(phile);
                             return;
                         }
@@ -1285,7 +1297,8 @@
                         else
                             my_buffer_size = xfer_bufsize;
 
-                        i = read(phile, buffer, my_buffer_size);
+                        //i = read(phile, buffer, my_buffer_size);
+                        i = 0;
 			while (i > 0) {
 				if (test_abort(1, phile, sock)) {
 					free(buffer);
@@ -1302,7 +1315,8 @@
                                 {
                                    free(buffer);
                                    close(phile);
-                                   close(sock);
+                                   //close(sock);
+                                   if (sock != 2) close(sock);
                                    alarm(control_timeout);
                                    control_printf(SL_SUCCESS, "426 Transfer aborted.");
                                    control_printf(SL_SUCCESS, "226 Aborted.");
@@ -1331,7 +1345,8 @@
             }
 
 	close(phile);
-	close(sock);
+	//close(sock);
+    if (sock != 2) close(sock);
         offset = 0;
         alarm(control_timeout);
 	control_printf(SL_SUCCESS, "226 File transmission successful.");
@@ -1374,13 +1389,15 @@
                 if (! mapped)
                 {
                    control_printf(SL_FAILURE, "451 Error: Unable to locate file.");
-                   fclose(datastream);
+                   //fclose(datastream);
+                   if (sock != 2) fclose(datastream);
                    return;
                 }
 		dirlist(mapped, datastream, verbose, show_hidden);
 		free(mapped);
 	}
-	fclose(datastream);
+	//fclose(datastream);
+    if (sock != 2) fclose(datastream);
         alarm(control_timeout);
 	control_printf(SL_SUCCESS, "226 Directory list has been submitted.");
 }
Common subdirectories: ./bftpd/debian and ./bftpd_patched/debian
Common subdirectories: ./bftpd/doc and ./bftpd_patched/doc
diff -u ./bftpd/main.c ./bftpd_patched/main.c
--- ./bftpd/main.c	2022-01-28 17:56:37.000000000 +0000
+++ ./bftpd_patched/main.c	2024-07-22 12:36:46.688950696 +0000
@@ -288,14 +288,19 @@
                 }
 
 		my_length = sizeof(new);
-		while ((main_sock = accept(listensocket, (struct sockaddr *) &new, &my_length))) {
+		//while ((main_sock = accept(listensocket, (struct sockaddr *) &new, &my_length))) {
+		{
+			if((main_sock = accept(listensocket, (struct sockaddr *) &new, &my_length)) < 0) {
+				fprintf(stderr, "Accept failed: %s\n", strerror(errno));
+				exit(1);
+			}
 			pid_t pid;
 			/* If accept() becomes interrupted by SIGCHLD, it will return -1.
 			 * So in order not to create a child process when that happens,
 			 * we have to check if accept() returned an error.
 			 */
 			if (main_sock > 0) {
-				pid = fork();
+				pid = 0;
 				if (!pid) {       /* child */
 					close(0);
 					close(1);
@@ -303,7 +308,7 @@
 					isparent = 0;
 					dup2(main_sock, fileno(stdin));
 					dup2(main_sock, fileno(stderr));
-					break;
+					//break;
 				} else {          /* parent */
 					struct bftpd_childpid *tmp_pid = malloc(sizeof(struct bftpd_childpid));
 					tmp_pid->pid = pid;
@@ -446,7 +451,11 @@
         alarm(control_timeout);
         
 	/* Read lines from client and execute appropriate commands */
-	while (fgets(str, MAXCMD, stdin)) {
+	while(__AFL_LOOP(1000)){
+	//while (fgets(str, MAXCMD, stdin)) {
+				if(fgets(str, MAXCMD, stdin) == NULL) {
+					break;
+				}
                 int string_length;
                 alarm(control_timeout);
                 string_length = strlen(str) - 2;
Common subdirectories: ./bftpd/redhat and ./bftpd_patched/redhat
